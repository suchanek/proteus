// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "v3space.h"

/////////////////////////////////////////////////////////////////////////////
// CV3Space

IMPLEMENT_DYNCREATE(CV3Space, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CV3Space properties

BOOL CV3Space::GetAutoClipping()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetAutoClipping(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

long CV3Space::GetBufferingType()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetBufferingType(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

BOOL CV3Space::GetDetailSeekOn()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetDetailSeekOn(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

long CV3Space::GetFeedbackSize()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetFeedbackSize(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

BOOL CV3Space::GetFeedbackVisibility()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetFeedbackVisibility(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

BOOL CV3Space::GetHeadlightOn()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetHeadlightOn(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

BOOL CV3Space::GetPopupMenuEnabled()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetPopupMenuEnabled(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

float CV3Space::GetSeekTime()
{
	float result;
	GetProperty(0x5, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetSeekTime(float propVal)
{
	SetProperty(0x5, VT_R4, propVal);
}

BOOL CV3Space::GetViewingOn()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetViewingOn(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

long CV3Space::GetInteractiveDrawStyle()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetInteractiveDrawStyle(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

long CV3Space::GetStillDrawStyle()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetStillDrawStyle(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

long CV3Space::GetViewerType()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetViewerType(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

CString CV3Space::GetWwwDdeServiceName()
{
	CString result;
	GetProperty(0xd, VT_BSTR, (void*)&result);
	return result;
}

void CV3Space::SetWwwDdeServiceName(LPCTSTR propVal)
{
	SetProperty(0xd, VT_BSTR, propVal);
}

BOOL CV3Space::GetDecorationOn()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetDecorationOn(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

BOOL CV3Space::GetWwwEnable()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetWwwEnable(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

BOOL CV3Space::GetUrlPickEnable()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetUrlPickEnable(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

BOOL CV3Space::GetSelectionEnable()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetSelectionEnable(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

BOOL CV3Space::GetRememberLastFile()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetRememberLastFile(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

CString CV3Space::GetLastFileName()
{
	CString result;
	GetProperty(0x13, VT_BSTR, (void*)&result);
	return result;
}

void CV3Space::SetLastFileName(LPCTSTR propVal)
{
	SetProperty(0x13, VT_BSTR, propVal);
}

CString CV3Space::GetStartFileName()
{
	CString result;
	GetProperty(0x14, VT_BSTR, (void*)&result);
	return result;
}

void CV3Space::SetStartFileName(LPCTSTR propVal)
{
	SetProperty(0x14, VT_BSTR, propVal);
}

BOOL CV3Space::GetSerializeSceneGraph()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetSerializeSceneGraph(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}

CString CV3Space::GetText3d()
{
	CString result;
	GetProperty(0x16, VT_BSTR, (void*)&result);
	return result;
}

void CV3Space::SetText3d(LPCTSTR propVal)
{
	SetProperty(0x16, VT_BSTR, propVal);
}

float CV3Space::GetText3dRotationX()
{
	float result;
	GetProperty(0x17, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetText3dRotationX(float propVal)
{
	SetProperty(0x17, VT_R4, propVal);
}

float CV3Space::GetText3dRotationY()
{
	float result;
	GetProperty(0x18, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetText3dRotationY(float propVal)
{
	SetProperty(0x18, VT_R4, propVal);
}

float CV3Space::GetText3dRotationZ()
{
	float result;
	GetProperty(0x19, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetText3dRotationZ(float propVal)
{
	SetProperty(0x19, VT_R4, propVal);
}

BOOL CV3Space::GetText3dEnable()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetText3dEnable(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}

BOOL CV3Space::GetText3dSpinEnable()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetText3dSpinEnable(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}

float CV3Space::GetText3dRed()
{
	float result;
	GetProperty(0x1c, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetText3dRed(float propVal)
{
	SetProperty(0x1c, VT_R4, propVal);
}

float CV3Space::GetText3dGreen()
{
	float result;
	GetProperty(0x1d, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetText3dGreen(float propVal)
{
	SetProperty(0x1d, VT_R4, propVal);
}

float CV3Space::GetText3dBlue()
{
	float result;
	GetProperty(0x1e, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetText3dBlue(float propVal)
{
	SetProperty(0x1e, VT_R4, propVal);
}

float CV3Space::GetText3dSpeedX()
{
	float result;
	GetProperty(0x1f, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetText3dSpeedX(float propVal)
{
	SetProperty(0x1f, VT_R4, propVal);
}

float CV3Space::GetText3dSpeedY()
{
	float result;
	GetProperty(0x20, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetText3dSpeedY(float propVal)
{
	SetProperty(0x20, VT_R4, propVal);
}

float CV3Space::GetText3dSpeedZ()
{
	float result;
	GetProperty(0x21, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetText3dSpeedZ(float propVal)
{
	SetProperty(0x21, VT_R4, propVal);
}

long CV3Space::GetText3dParts()
{
	long result;
	GetProperty(0x22, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetText3dParts(long propVal)
{
	SetProperty(0x22, VT_I4, propVal);
}

long CV3Space::GetText3dJustification()
{
	long result;
	GetProperty(0x23, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetText3dJustification(long propVal)
{
	SetProperty(0x23, VT_I4, propVal);
}

float CV3Space::GetText3dComplexity()
{
	float result;
	GetProperty(0x24, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetText3dComplexity(float propVal)
{
	SetProperty(0x24, VT_R4, propVal);
}

CString CV3Space::GetText3dFontName()
{
	CString result;
	GetProperty(0x25, VT_BSTR, (void*)&result);
	return result;
}

void CV3Space::SetText3dFontName(LPCTSTR propVal)
{
	SetProperty(0x25, VT_BSTR, propVal);
}

float CV3Space::GetText3dFontSize()
{
	float result;
	GetProperty(0x26, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetText3dFontSize(float propVal)
{
	SetProperty(0x26, VT_R4, propVal);
}

BOOL CV3Space::GetFog()
{
	BOOL result;
	GetProperty(0x27, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetFog(BOOL propVal)
{
	SetProperty(0x27, VT_BOOL, propVal);
}

BOOL CV3Space::GetAntiAliasing()
{
	BOOL result;
	GetProperty(0x28, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetAntiAliasing(BOOL propVal)
{
	SetProperty(0x28, VT_BOOL, propVal);
}

long CV3Space::GetTransparencyType()
{
	long result;
	GetProperty(0x29, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetTransparencyType(long propVal)
{
	SetProperty(0x29, VT_I4, propVal);
}

long CV3Space::GetSelectionMethod()
{
	long result;
	GetProperty(0x2a, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetSelectionMethod(long propVal)
{
	SetProperty(0x2a, VT_I4, propVal);
}

long CV3Space::GetManipulatorType()
{
	long result;
	GetProperty(0x2b, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetManipulatorType(long propVal)
{
	SetProperty(0x2b, VT_I4, propVal);
}

long CV3Space::GetLastFileType()
{
	long result;
	GetProperty(0x2c, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetLastFileType(long propVal)
{
	SetProperty(0x2c, VT_I4, propVal);
}

float CV3Space::GetDxfAmbientScaleR()
{
	float result;
	GetProperty(0x2d, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetDxfAmbientScaleR(float propVal)
{
	SetProperty(0x2d, VT_R4, propVal);
}

float CV3Space::GetDxfAmbientScaleG()
{
	float result;
	GetProperty(0x2e, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetDxfAmbientScaleG(float propVal)
{
	SetProperty(0x2e, VT_R4, propVal);
}

float CV3Space::GetDxfAmbientScaleB()
{
	float result;
	GetProperty(0x2f, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetDxfAmbientScaleB(float propVal)
{
	SetProperty(0x2f, VT_R4, propVal);
}

float CV3Space::GetDxfEmissiveScaleR()
{
	float result;
	GetProperty(0x30, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetDxfEmissiveScaleR(float propVal)
{
	SetProperty(0x30, VT_R4, propVal);
}

float CV3Space::GetDxfEmissiveScaleG()
{
	float result;
	GetProperty(0x31, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetDxfEmissiveScaleG(float propVal)
{
	SetProperty(0x31, VT_R4, propVal);
}

float CV3Space::GetDxfEmissiveScaleB()
{
	float result;
	GetProperty(0x32, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetDxfEmissiveScaleB(float propVal)
{
	SetProperty(0x32, VT_R4, propVal);
}

float CV3Space::GetDxfSpecularR()
{
	float result;
	GetProperty(0x33, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetDxfSpecularR(float propVal)
{
	SetProperty(0x33, VT_R4, propVal);
}

float CV3Space::GetDxfSpecularG()
{
	float result;
	GetProperty(0x34, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetDxfSpecularG(float propVal)
{
	SetProperty(0x34, VT_R4, propVal);
}

float CV3Space::GetDxfSpecularB()
{
	float result;
	GetProperty(0x35, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetDxfSpecularB(float propVal)
{
	SetProperty(0x35, VT_R4, propVal);
}

long CV3Space::GetDxfVertexOrdering()
{
	long result;
	GetProperty(0x36, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetDxfVertexOrdering(long propVal)
{
	SetProperty(0x36, VT_I4, propVal);
}

long CV3Space::GetDxfShapeType()
{
	long result;
	GetProperty(0x37, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetDxfShapeType(long propVal)
{
	SetProperty(0x37, VT_I4, propVal);
}

long CV3Space::GetDxfFaceType()
{
	long result;
	GetProperty(0x38, VT_I4, (void*)&result);
	return result;
}

void CV3Space::SetDxfFaceType(long propVal)
{
	SetProperty(0x38, VT_I4, propVal);
}

float CV3Space::GetDxfCreaseAngle()
{
	float result;
	GetProperty(0x39, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetDxfCreaseAngle(float propVal)
{
	SetProperty(0x39, VT_R4, propVal);
}

BOOL CV3Space::GetDragDropEnable()
{
	BOOL result;
	GetProperty(0x3a, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetDragDropEnable(BOOL propVal)
{
	SetProperty(0x3a, VT_BOOL, propVal);
}

BOOL CV3Space::GetExtendedPopupEnable()
{
	BOOL result;
	GetProperty(0x3b, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetExtendedPopupEnable(BOOL propVal)
{
	SetProperty(0x3b, VT_BOOL, propVal);
}

BOOL CV3Space::GetNotifyUrlPicked()
{
	BOOL result;
	GetProperty(0x3c, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetNotifyUrlPicked(BOOL propVal)
{
	SetProperty(0x3c, VT_BOOL, propVal);
}

BOOL CV3Space::GetNotifyContainerUrlPicked()
{
	BOOL result;
	GetProperty(0x3d, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetNotifyContainerUrlPicked(BOOL propVal)
{
	SetProperty(0x3d, VT_BOOL, propVal);
}

BOOL CV3Space::GetNotifyUpdatePickUrlName()
{
	BOOL result;
	GetProperty(0x3e, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetNotifyUpdatePickUrlName(BOOL propVal)
{
	SetProperty(0x3e, VT_BOOL, propVal);
}

CString CV3Space::GetHtmlKey()
{
	CString result;
	GetProperty(0x3f, VT_BSTR, (void*)&result);
	return result;
}

void CV3Space::SetHtmlKey(LPCTSTR propVal)
{
	SetProperty(0x3f, VT_BSTR, propVal);
}

CString CV3Space::GetUrl()
{
	CString result;
	GetProperty(0x40, VT_BSTR, (void*)&result);
	return result;
}

void CV3Space::SetUrl(LPCTSTR propVal)
{
	SetProperty(0x40, VT_BSTR, propVal);
}

BOOL CV3Space::GetUrlLoadAsync()
{
	BOOL result;
	GetProperty(0x41, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetUrlLoadAsync(BOOL propVal)
{
	SetProperty(0x41, VT_BOOL, propVal);
}

float CV3Space::GetBgColorRed()
{
	float result;
	GetProperty(0x42, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetBgColorRed(float propVal)
{
	SetProperty(0x42, VT_R4, propVal);
}

float CV3Space::GetBgColorGreen()
{
	float result;
	GetProperty(0x43, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetBgColorGreen(float propVal)
{
	SetProperty(0x43, VT_R4, propVal);
}

float CV3Space::GetBgColorBlue()
{
	float result;
	GetProperty(0x44, VT_R4, (void*)&result);
	return result;
}

void CV3Space::SetBgColorBlue(float propVal)
{
	SetProperty(0x44, VT_R4, propVal);
}

BOOL CV3Space::GetDollyCameraSmooth()
{
	BOOL result;
	GetProperty(0x45, VT_BOOL, (void*)&result);
	return result;
}

void CV3Space::SetDollyCameraSmooth(BOOL propVal)
{
	SetProperty(0x45, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CV3Space operations

void CV3Space::EditAmbientLight()
{
	InvokeHelper(0x6e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::EditBackgroundColor()
{
	InvokeHelper(0x64, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::EditCameras()
{
	InvokeHelper(0x5f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::EditLights()
{
	InvokeHelper(0x60, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::EditLightColor(long lLightId)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x92, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId);
}

void CV3Space::EditSelectionMaterial()
{
	InvokeHelper(0x62, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::EditSelectionColor()
{
	InvokeHelper(0x63, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CV3Space::ImportFile()
{
	BOOL result;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CV3Space::OpenFile()
{
	BOOL result;
	InvokeHelper(0x5a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CV3Space::SelectViewer()
{
	InvokeHelper(0x5e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CV3Space::copyCamera(LPDISPATCH nDstId, LPDISPATCH nSrcId)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_DISPATCH;
	InvokeHelper(0x5c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nDstId, nSrcId);
	return result;
}

long CV3Space::createDirectLight(LPCTSTR lpszLightName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x76, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpszLightName);
	return result;
}

long CV3Space::createPointLight(LPCTSTR lpszLightName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x77, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpszLightName);
	return result;
}

long CV3Space::createSpotLight(LPCTSTR lpszLightName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x78, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpszLightName);
	return result;
}

BOOL CV3Space::deleteCamera(LPDISPATCH nCameraId)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x5d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nCameraId);
	return result;
}

void CV3Space::deleteSceneGraph()
{
	InvokeHelper(0x9d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::deleteLight(long lLightId)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x91, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId);
}

void CV3Space::editCopy()
{
	InvokeHelper(0x9f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::editCut()
{
	InvokeHelper(0x9e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::editDelete()
{
	InvokeHelper(0xa7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::editSelectAll()
{
	InvokeHelper(0xa8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::editPaste()
{
	InvokeHelper(0xa0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CV3Space::getFeedbackSize()
{
	long result;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CV3Space::getBufferingType()
{
	long result;
	InvokeHelper(0x4e, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CV3Space::getFirstLight()
{
	long result;
	InvokeHelper(0x93, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CV3Space::getLightColor(long lLightId, float* lpfRed, float* lpfGreen, float* lpdBlue)
{
	static BYTE parms[] =
		VTS_I4 VTS_PR4 VTS_PR4 VTS_PR4;
	InvokeHelper(0x82, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId, lpfRed, lpfGreen, lpdBlue);
}

void CV3Space::getLightIntensity(long lLightId, float* lpfIntensity)
{
	static BYTE parms[] =
		VTS_I4 VTS_PR4;
	InvokeHelper(0x85, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId, lpfIntensity);
}

CString CV3Space::getLightName(long lLightId)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x86, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		lLightId);
	return result;
}

long CV3Space::getLightId(LPCTSTR lpszLightName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x89, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpszLightName);
	return result;
}

void CV3Space::getLightDirection(long lLightId, float* lpfX, float* lpfY, float* lpfZ)
{
	static BYTE parms[] =
		VTS_I4 VTS_PR4 VTS_PR4 VTS_PR4;
	InvokeHelper(0x8a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId, lpfX, lpfY, lpfZ);
}

float CV3Space::getLightDropOffRate(long lLightId)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8d, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		lLightId);
	return result;
}

void CV3Space::getLightLocation(long lLightId, float* lpfX, float* lpfY, float* lpfZ)
{
	static BYTE parms[] =
		VTS_I4 VTS_PR4 VTS_PR4 VTS_PR4;
	InvokeHelper(0x8f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId, lpfX, lpfY, lpfZ);
}

long CV3Space::getLightType(long lLightId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x90, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lLightId);
	return result;
}

long CV3Space::getNextLight(long lLightId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x94, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lLightId);
	return result;
}

long CV3Space::getNumCameras()
{
	long result;
	InvokeHelper(0x5b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CV3Space::getNumSelected()
{
	long result;
	InvokeHelper(0x70, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

float CV3Space::getSeekTime()
{
	float result;
	InvokeHelper(0x4f, DISPATCH_METHOD, VT_R4, (void*)&result, NULL);
	return result;
}

long CV3Space::getViewerType()
{
	long result;
	InvokeHelper(0x72, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CV3Space::hideAllLights()
{
	InvokeHelper(0x6c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CV3Space::importSceneGraph(LPCTSTR lpszFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpszFileName);
	return result;
}

BOOL CV3Space::isAutoClipping()
{
	BOOL result;
	InvokeHelper(0x50, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CV3Space::isDecorating()
{
	BOOL result;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CV3Space::isDetailSeek()
{
	BOOL result;
	InvokeHelper(0x51, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CV3Space::isFeedbackVisible()
{
	BOOL result;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CV3Space::isHeadlight()
{
	BOOL result;
	InvokeHelper(0x52, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CV3Space::isLightOn(long nLightId)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nLightId);
	return result;
}

BOOL CV3Space::isPopupMenuEnabled()
{
	BOOL result;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CV3Space::isViewing()
{
	BOOL result;
	InvokeHelper(0x53, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CV3Space::isWWWEnable()
{
	BOOL result;
	InvokeHelper(0x98, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CV3Space::isUrlPickEnable()
{
	BOOL result;
	InvokeHelper(0x99, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CV3Space::isSelectionEnable()
{
	BOOL result;
	InvokeHelper(0x9a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CV3Space::readSceneGraph(LPCTSTR lpszFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpszFileName);
	return result;
}

void CV3Space::resetToHomePositon()
{
	InvokeHelper(0x49, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::SaveFile()
{
	InvokeHelper(0x9c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::saveHomePosition()
{
	InvokeHelper(0x54, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::saveSceneGraph(LPCTSTR fileName, BOOL bVrmlHeader)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0xab, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 fileName, bVrmlHeader);
}

void CV3Space::SelectViewpoint()
{
	InvokeHelper(0xac, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setAutoClipping(BOOL onOrOff)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x55, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 onOrOff);
}

void CV3Space::setCurrentCamera(LPDISPATCH lCameraId)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x6f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lCameraId);
}

void CV3Space::setLightColor(long lLightId, float fRed, float fGreen, float fBlue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x83, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId, fRed, fGreen, fBlue);
}

void CV3Space::setLightIntensity(long lLightId, float fIntensity)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x84, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId, fIntensity);
}

void CV3Space::setLightName(long lLightId, LPCTSTR lpszLightName)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x87, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId, lpszLightName);
}

void CV3Space::setLightDirection(long lLightId, float fX, float fY, float fZ)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x8b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId, fX, fY, fZ);
}

void CV3Space::setLightLocation(long lLightId, float fX, float fY, float fZ)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x8c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId, fX, fY, fZ);
}

void CV3Space::setLightDropOffRate(long lLightId, float fDropRate)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x8e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId, fDropRate);
}

void CV3Space::setDetailSeek(BOOL onOrOff)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x56, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 onOrOff);
}

void CV3Space::setHeadlight(BOOL onOrOff)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x57, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 onOrOff);
}

void CV3Space::setSeekTime(float seconds)
{
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x58, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 seconds);
}

void CV3Space::setViewing(BOOL onOrOff)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x59, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 onOrOff);
}

void CV3Space::setBufferingType(long lBufferType)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x61, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lBufferType);
}

void CV3Space::setCenterballManip()
{
	InvokeHelper(0x65, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setHandleboxManip()
{
	InvokeHelper(0x66, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setJackManip()
{
	InvokeHelper(0x67, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setNoneManip()
{
	InvokeHelper(0x68, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setReplaceAllManip()
{
	InvokeHelper(0x69, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setTabboxManip()
{
	InvokeHelper(0x6a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setTrackballManip()
{
	InvokeHelper(0x6b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setFeedbackSize(long lFeedbackSize)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x71, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lFeedbackSize);
}

void CV3Space::setExaminerViewer()
{
	InvokeHelper(0x73, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setFlyViewer()
{
	InvokeHelper(0x74, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setWalkViewer()
{
	InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setPlaneViewer()
{
	InvokeHelper(0xaa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setTransformBoxManip()
{
	InvokeHelper(0x79, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setFog(BOOL nOnOff)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nOnOff);
}

void CV3Space::setAntialiasing(BOOL nOnOff)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nOnOff);
}

void CV3Space::setTransparencyType(long lTranType)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lTranType);
}

void CV3Space::setViewerType(long lViewerType)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lViewerType);
}

void CV3Space::setSelectionMethod(long lSelectMethod)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lSelectMethod);
}

void CV3Space::setWWWEnable(BOOL bEnable)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x95, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bEnable);
}

void CV3Space::setUrlPickEnable(BOOL bEnable)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x96, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bEnable);
}

void CV3Space::setSelectionEnable(BOOL bEnable)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x97, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bEnable);
}

void CV3Space::showAllLights()
{
	InvokeHelper(0x6d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::stopAnimating()
{
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::turnOnLight(long lLightId)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x80, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId);
}

void CV3Space::turnOffLight(long lLightId)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x81, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lLightId);
}

BOOL CV3Space::validateLightId(long lLightId)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x88, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lLightId);
	return result;
}

void CV3Space::viewAll()
{
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::setInteractiveDrawStyle(long lDrawStyle)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lDrawStyle);
}

long CV3Space::getInteractiveDrawStyle()
{
	long result;
	InvokeHelper(0xa2, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CV3Space::setStillDrawStyle(long lDrawStyle)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lDrawStyle);
}

long CV3Space::getStillDrawStyle()
{
	long result;
	InvokeHelper(0xa4, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CV3Space::setFeedbackVisibility(BOOL nVisible)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xa5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nVisible);
}

void CV3Space::setPopupMenuEnabled(BOOL nEnabled)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xa9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nEnabled);
}

void CV3Space::EditHeadlight()
{
	InvokeHelper(0xad, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::viewSelection()
{
	InvokeHelper(0xae, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::serializeControl(VARIANT* pArchive)
{
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0xaf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 pArchive);
}

BOOL CV3Space::readSceneGraphEx(LPCTSTR lpszFileName, long nFileType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0xb0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpszFileName, nFileType);
	return result;
}

BOOL CV3Space::importSceneGraphEx(LPCTSTR lpszFileName, long nFileType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0xb1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpszFileName, nFileType);
	return result;
}

BOOL CV3Space::serializeSceneGraphEx(VARIANT* pArchive, BOOL bVrmlHeader)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_BOOL;
	InvokeHelper(0xb2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pArchive, bVrmlHeader);
	return result;
}

BOOL CV3Space::isValidFile(LPCTSTR lpszFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lpszFileName);
	return result;
}

BOOL CV3Space::isValidFileEx(VARIANT* pArchive)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0xb4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pArchive);
	return result;
}

void CV3Space::EditDxfProperties()
{
	InvokeHelper(0xb5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::EditSceneGraph()
{
	InvokeHelper(0xb6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CV3Space::sgeHighlightSelection()
{
	InvokeHelper(0xb7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH CV3Space::getSceneRoot()
{
	LPDISPATCH result;
	InvokeHelper(0xb8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH CV3Space::GetIDispatch()
{
	LPDISPATCH result;
	InvokeHelper(0xb9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH CV3Space::CreateIDispatchObject(LPCTSTR progID)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xba, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		progID);
	return result;
}

LPDISPATCH CV3Space::getCameraIDispatch(long nCameraId)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		nCameraId);
	return result;
}

LPDISPATCH CV3Space::getLightManipIDispatch(long nLightId)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		nLightId);
	return result;
}

void CV3Space::setDecorations(BOOL onOrOff)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 onOrOff);
}

void CV3Space::stopDollyCamera()
{
	InvokeHelper(0xbe, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CV3Space::isDollyCamera()
{
	BOOL result;
	InvokeHelper(0xbf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CV3Space::dollyCamera(LPDISPATCH nCameraId, double interval, BOOL dollyCameraComplete)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_R8 VTS_BOOL;
	InvokeHelper(0xc0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nCameraId, interval, dollyCameraComplete);
}

void CV3Space::SoDBSetDelaySensorTimeout(double timeout)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xc1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 timeout);
}

BOOL CV3Space::Play(LPCTSTR fileName, long options)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0xc2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		fileName, options);
	return result;
}

LPDISPATCH CV3Space::getViewportRegion()
{
	LPDISPATCH result;
	InvokeHelper(0xc3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH CV3Space::getEntireSceneGraph()
{
	LPDISPATCH result;
	InvokeHelper(0xc4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

CString CV3Space::getRegistryDataPath()
{
	CString result;
	InvokeHelper(0xc5, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

LPDISPATCH CV3Space::createPerspectiveCamera(LPCTSTR lpszCameraName)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xc6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		lpszCameraName);
	return result;
}

LPDISPATCH CV3Space::getCurrentCamera()
{
	LPDISPATCH result;
	InvokeHelper(0xc7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH CV3Space::createOrthographicCamera(LPCTSTR lpszCameraName)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xc8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		lpszCameraName);
	return result;
}

BOOL CV3Space::setCameraByIndex(long index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		index);
	return result;
}

void CV3Space::setSceneRoot(LPDISPATCH root)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xca, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 root);
}

BOOL CV3Space::setRegistryDataPath(LPCTSTR newPath)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xcb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		newPath);
	return result;
}

LPDISPATCH CV3Space::SoDBGetGlobalField(LPCTSTR fieldName)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xcc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		fieldName);
	return result;
}

void CV3Space::setGLRenderAction(LPDISPATCH boxHighlightRenderAction)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 boxHighlightRenderAction);
}

LPDISPATCH CV3Space::getGLRenderAction()
{
	LPDISPATCH result;
	InvokeHelper(0xce, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void CV3Space::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
